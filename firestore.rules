rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own user document
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Chat access rules
    match /chats/{chatId} {
      // Users can read/write chats they are members of
      allow read, write: if request.auth != null 
        && request.auth.uid in resource.data.members;
      
      // Allow creating new chats if user is in members list
      allow create: if request.auth != null 
        && request.auth.uid in request.resource.data.members;
      
      // Messages within chats
      match /messages/{messageId} {
        // Users can read messages in chats they're members of
        allow read: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        
        // Users can create messages in chats they're members of
        allow create: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members
          && (
            // Regular user messages
            (request.auth.uid == request.resource.data.senderId)
            ||
            // AI messages requested by user
            (request.resource.data.senderId == 'ai-assistant' 
             && request.resource.data.type == 'ai'
             && request.resource.data.aiMetadata.requestedBy == request.auth.uid)
          );
        
        // Users can update messages they sent (for read receipts)
        allow update: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
      }
      
      // Conversation insights within chats
      match /insights/{insightId} {
        // Users can read insights in chats they're members of
        allow read: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        
        // Allow creating insights (background processing by authenticated users)
        allow create: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        
        // Allow deleting insights when messages are deleted
        allow delete: if request.auth != null 
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
      }
      
      // Auto translation settings - users can only access their own settings
      match /autoTranslationSettings/{userId} {
        allow read, write: if request.auth != null 
          && request.auth.uid == userId
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
      }
    }
    
    // Typing indicators - ephemeral real-time data
    match /typing/{chatId} {
      // Users can read typing status for chats they're members of
      allow read: if request.auth != null 
        && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
      
      match /{userId} {
        // Users can only write their own typing status in chats they're members of
        allow create, update, delete: if request.auth != null 
          && request.auth.uid == userId
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
      }
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
